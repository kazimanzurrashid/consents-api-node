apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "consents-node.fullname" . }}
  labels:
    {{- include "consents-node.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "consents-node.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "consents-node.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.image.pullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{ with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{ end }}
      {{- with .Values.initContainers }}
      initContainers:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{ $realese_host := print .Release.Name "-postgresql" }}
          {{ $pg_host := .Values.postgresql.fullnameOverride | default $realese_host }}
          env:
            - name: PGDATABASE
              value: {{ .Values.postgresql.auth.database }}
            - name: PGUSER
              value: {{ .Values.postgresql.auth.username }}
            - name: PGPASSWORD
              {{ if and .Values.postgresql.auth.existingSecret .Values.postgresql.auth.secretKeys.userPasswordKey }}
              valueFrom:
                secretKeyRef:
                  name:  {{ .Values.postgresql.auth.existingSecret }}
                  key: {{ .Values.postgresql.auth.secretKeys.userPasswordKey }}
              {{ else }}
              valueFrom:
                secretKeyRef:
                  name: {{ $pg_host }}
                  key: password
              {{ end }}
            - name: PGHOST
              value: {{ $pg_host }}
            - name: PGPORT
              value: {{ .Values.postgresql.containerPorts.postgresql | default 5432 | quote }}
            - name: NODE_ENV
              value: production
            - name: PORT
              value: {{ .Values.containerPort | quote }}
          {{ with .Values.containerSecurityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{ end }}
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.containerPort }}
              protocol: TCP
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: /health
              port: {{ .Values.containerPort }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          {{ end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: /health?detail=yes
              port: {{ .Values.containerPort }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          {{ end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
